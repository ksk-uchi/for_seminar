===================
これまでのおさらい
===================


はじめに
===========

このテキストはこれまでにやったことのおさらいをするためのものです。
端的にポイントのみを抑えて書いていきます。

詳しくはPDFの講義資料と併用して読んでいただけると幸いです。


変数
======

「var」というキーワードを用いて変数を宣言できます。

var a;

var hensu,
    hensu2;

変数名はアルファベットで始まり、アルファベットか数字を組み合わせた名前が有効です。
上記の例では a という変数と hensu という変数と hensu2 という変数を宣言しています。

変数 a のように、変数を一つだけ宣言することもできますし、
hensu, hensu2 のように、複数の変数をまとめて宣言することも可能です。
これはどちらを用いても同じですので、
複数の変数を宣言する際は下の記法を用いると良いでしょう。
（hensu2の前に空白文字を4つ入れているのは、変数の頭を揃えることで、
見た目を分かりやすくしているだけです。）

また、変数とは関係ありませんが、
JavaScriptでは、文の最後に「;（セミコロン）」を書くというルールがあります。
書かなくても問題ないケースもありますが、
なるべく書くようにしましょう。


また、変数宣言時にはそのまま値を代入することも可能です。

var sum = 50 + 20 + 60;

このようにすると、
予め130という値の入ったsumという変数を用意出来ます。


定数
========

よく使う定数は下記の3種類です。

- 数値
- 文字列
- 二値

数値と文字列についてはそこまで大きな問題はないと思います。
数値は123や0.56など数字で構成される値ですし、
文字列は"apple"や"あいうえお"などのようにダブルコーテーションで挟んで表現します。
気をつけないといけないのは、123と"123"は人間にしてみると大して違いはないですが、
機械にとってみれば大きく異なるという点です。

また二値についてです。
二値とは「裏と表」や「ONとOFF」のような、
2つの値の事を言います。
JavaScriptにおける二値は true と false です。

足し算や掛け算を行う上で true や false を使うことはありませんが、
プログラムを書く上では今後頻繁に使う概念ですので覚えておいて下さい。


あと、プログラムがうまく動かないときによく出てくる定数が下の2つです。

- null
- undefined

これらは「空（から）」とか「無」を表現しています。
自分の書いたプログラムが思ったように動かない時など、
使っている変数の中にどんな値が入っているかを確認する必要がありますが、
その時 null や undefined が入っていたら、
その変数を作っている箇所で思わぬ処理が行われているかもしれません。

意図的に変数に null や undefined を代入するケースもありますが、
そんなに頻繁あるケースではないため、
一旦、定数は上記の3つを覚えておきましょう。


演算子
=========

JavaScriptで使える演算子は下記です。
とても良く使うので覚えておきましょう。

- 「 + 」演算子
50 + 12 という式は62と評価されます。
+ 演算子はこのように数値同士の足し算に使う他、文字列の連結にも使います。
"abc" + "def" という式は"abcdef"と評価されます。
注意してほしいのは"50" + "12" が "5012"となることです。
これは数値ではなく文字列として数字の足し算を行なっているから連結されたという事です。

- 「 - 」演算子
30 - 29 という式は1と評価されます。
+ 演算子が文字列の連結ができたように
"abc" - "b"という式は"ac"と評価されそうなものですが、
「- 演算子」は数値同士にしか用いることができません。

- 「 * 」演算子
掛け算のための演算子です。
5 * 12 は 60 と評価されます。
また算数でも習ったと思うのですが、
2 + 5 * 12 は掛け算の方が先に評価されるので、
2 + 60 となり、全体では 62 と評価されます。
7 * 12 で 84 とはならないので注意して下さい。

- 「 / 」演算子
掛け算のための演算子です。
72 / 8 は 9 と評価されます。

- 「 % 」演算子
見慣れないと思います。。
この演算子は割った時の余りを求める演算子になります。
11 % 6 という式の評価結果は5になります。
これは「11 割る 6」の結果が「1 余り 5」となるためです。
同様に 19 % 7 は 5 となりますし、111 % 9 は 3 となります。

よくある使われ方として、
「(数字) % 2」とし、評価結果が 1 になれば奇数、
0 になれば偶数というふうに、数字が奇数か偶数かを判別する際に用います。

- 「 = 」演算子
これは代入演算子です。
変数に値を代入する際によく用います。
算数の「=」だと、左側と右側が等価であることを表す記号ですが、
JavaScriptでは意味が違いますので注意が必要です。

- 「 == 」演算子
これは等価演算子です。
算数の「=」と同じです。
123 == 123 は 正しいので true と評価されます。
すこし実践的な例で説明すると、
var a = "5006";
a == 5006 も正しいと評価され true が得られます。

また、"apple" == "banana" は左と右が異なる文字列なので、
false と評価されます。

- 「 != 」演算子
「==」の逆です。左側と右側が異なるか否かを評価します。
「==」は true か false を返す演算子でしたが、
「!=」は「==」の結果と反対の結果を返します。

"apple" != "banana" は true となり、
123 != 123 は false となります。

- 「 === 」演算子
完全一致演算子です。
「==」とほぼほぼ同じですが、
違いはもう少し厳しく一致を評価する点です。
5 == "5" は true でしたが、
5 === "5" は false となります。
これは数値と文字列という違いがあるためです。

- 「 !== 」演算子
「===」の逆です。
「===」で true と評価されるものは false になり、
「===」で false と評価されるものは true になります。

- 「 < 」演算子（日本語では「〜より大きい」）
- 「 > 」演算子（日本語では「〜より小さい」）
左側と右側の大小関係を評価します。

5 < 10 という式は true と評価されます。
72 < 15 は false です。

- 「 <= 」演算子（日本語では「以下」）
- 「 >= 」演算子（日本語では「以上」）
左側と右側の大小関係を評価します。
上記「<, >」と違い、
左側と右側が同じでも true と評価されます。

- 「 && 」演算子
AND演算子です。日本語では「かつ」と評価されます。
右側と左側が両方 true の場合に限り true となり、
それ以外の場合は false となります。

例えば true && false は false と評価されます。
もっと具体的な例だと、
10 < 40 && 30 < 45 は 10 < 40 と 30 < 45 がそれぞれ true なので、
true && true となり、true と評価されます。

- 「 || 」演算子
OR演算子です。日本語では「または」と表現されます。
左側と右側が両方 false の場合に限り false となり、
それ以外の場合は true となります。

たとえば、true || false は true と評価されます。
var name = "keisuke";
name == "ichiro" || name == "keisuke" は name == "ichiro" は false ですが、
name == "keisuke" が true となるため、 true と評価されます。


以上が演算子でした。
ちょっと数が多いですが、多くは感覚的なものですので覚えやすいと思います。
いくつか「%」や「&&」、「||」など、普段の生活において余り使わないような演算子が出てきたと思いますが、
よく使いますので覚えておきましょう。


データ構造
===========

1. 配列
---------

「 [ 」と「 ] 」の間に「, 」カンマ区切りで要素を並べたものを配列といいます。

var brother = ["ichiro", "jiro", "saburo", "shiro"];

配列内の要素には0番から順番が割り振られており、
順番（インデックス）を使って、それぞれの要素にアクセスすることが出来ます。

console.log(brother[0]); // -> "ichiro"
console.log(brother[3]); // -> "shiro"


また、存在しないインデックスにアクセスすると、
undefined が返ってきます。
console.log(brother[4]); // -> undefined

※ 「//」は、そこ以降、行末までをコメントアウトするための記法です。
HTMLでいうところの<!-- コメントアウト -->のように、
複数行をコメントアウトする場合は、「/* コメントアウト */」という記法も使えます。
JavaScriptに許されたコメントアウトの記法は上記の2種類のみです。


2. オブジェクト
-----------------

「 { 」と「 } 」の間に「 key名 : 値 」という形式の要素を「, 」カンマ区切りで並べたものをオブジェクトといいます。

var fruit_value = { apple: 100, banana: 50, melon: 300};
また、オブジェクトの場合、改行とインデントを使って書くと見やすいため、
下記のように書くのが一般的です。
var fruit_value = {
    apple: 100,
    banana: 50,
    melon: 300
};
配列では要素の集まりに番号を割り振っていましたが、
オブジェクトでは名前を割り振っています。

各要素にアクセスする方法は、
console.log(fruit_value.apple); // -> 100
のように、ドットを用いて「変数.key名」としてアクセスするか、
console.log(fruit_value["melon"]); // -> 300
のように、配列チックにアクセスするかが選べます。

基本的にはドットを用いてアクセスするのですが、
下記の例のように、変数の中にkey名を文字列で入れておいて、
その変数を用いて要素にアクセスしたい時は後者の配列チックなアクセスをするケースがあります。

var key_name = "banana",
    fruit_value = {
        apple: 100,
        banana: 50,
        melon: 300
    };

console.log(fruit_value[key_name]); // -> 50


条件分岐
==========

「〜（条件）が true の時、〜という処理をし、false の時、〜という処理をする」のように、
条件によって、実行される処理を変えるための手法を条件分岐といいます。

JavaScriptでは条件分岐を if 文 を用いて表現します。

var tall = 164,
    weight = 63,
    bmi;

bmi = weight / (tall * tall);

if (bmi < 20) {
    console.log("痩せ気味");
} else if (bmi < 24) {
    console.log("普通");
} else if (bmi < 26.5) {
    console.log("太り気味");
} else {
    console.log("太り過ぎ");
}

上記の例はBMI数値を求め、
その数値によって体質を判定するプログラムです。

if 文の最も基本的な形は、

if (条件式1) { 処理1 }

というものです。
条件式1の評価結果が true になる時、処理1を実行します。
逆に、条件式1の評価結果が false の場合、処理1は実行されません。

次に抑えておきたい形は、

if (条件式1) { 処理1 } else { 処理2 }

というものです。
条件式1の評価結果が true のとき処理1が実行され、
false のときは処理2が実行されます。

最後に抑えておきたい形は、

if (条件式1) { 処理1 } else if (条件式2) { 処理2 } else { 処理3 }

という形です。
これは、条件式1が true の時、処理1が実行され、
条件式1が false のときは、さらに条件式2について考えます。
条件式1が false でかつ、条件式2が true のときは処理2が実行され、
条件式1が false でかつ、条件式2が false のときは処理3が実行されます。

         条件式2  |     true     |       false
   条件式1        |              |
------------------+--------------+-------------------
                  |
    true          |            処理1
                  |
------------------+--------------+-------------------
                  |              |
    false         |     処理2    |       処理3
                  |              |


また、if 文の形を示すのに、ひな形を横長に書きましたが、
横に長く書くとパッと見た時に分かりづらいため、
上記のBMIの例のように、改行やインデントを加えて表記するのが一般的です。


繰り返し処理
===============

「〜（条件）が成り立つ限り、ある処理を繰り返す」のように、
条件に基づいて繰り返し処理を実行する手法が for 文です。

for 文は正直初めて見るとウッ。。となると思います。
それは下記のような少し複雑なひな形に則って書かなければいけないからです。

for (初期化式; 条件式; 更新式) { 処理 }

初期化式は、for 文が実行されるにあたり、一番初めに一度だけ実行されます。
条件式は、for 文内の処理が実行される直前に評価され、結果が true であれば処理が実行されます。
更新式は、処理が実行され、再度条件式が評価される直前に実行されます。

上記の説明では中々伝わらないと思いますので、
簡単な例を用いて上記の説明を補足します。

for (var i = 0, j = 10; i < j; i = i + 1) {
    console.log(i);
}

上記を実行すると、
デバッガ（firebugやweb inspector等）のコンソールに0 から 9までの数値が縦に並んで出力されたかと思います。
それではこの現象について具体的に説明します。

まずはじめに初期化式で var i = 0, j = 10 とあるので、
for 文を実行する前に、iという変数とjという変数を用意し、それぞれに0 と 10を代入しておきます。
次に条件式で i < j とあり、現在 i=0, j=10で、条件式の評価結果は true であるため console.log(i);を実行します。
（ここで0が出力されました）
for 文の中の処理が全て実行されたので、更新式を実行します。
更新式は i = i + 1 となっているので、iの値を1増加させます。（現状i=1, j=10）

これで for 文が1周しました。
2周目行うかどうかは条件式を満たしているかによります。
現在i=1, j=10となっており、 i < jの評価結果が true であるため、処理を続行します。
（ここで1が出力されました）
処理が終わったら更新式を実行し、 i = i + 1なので、iの値を1増加させます。（現状i=2, j=10）

上記の処理をi < jがfalseになるまで繰り返します。
上記の for 文において、jの値は変動しないため、i < jが false になるにはiが10にならなくてはなりません。
そしてi=10となった暁には、console.log(i);は実行されません。
なので上記の実行結果は、0 から 9までが縦に羅列される結果となります。

for 文がよく用いられるのが、
配列の全要素を列挙するケースです。
下記を確認して下さい。

var brother = ["ichiro", "jiro", "saburo", "shiro"],
    i = 0,
    j = brother.length;

for (; i < j; i = i + 1) {
    console.log(brother[i]);
}

このケースでは初期化式を省略しています。
このように、必要のない場合は初期化式を省略することが可能です。
上記の場合だと、変数宣言時に、初期化も済ませているため省略していますが、
もちろん変数宣言を一つにまとめず、for 文の中で書いてしまっても問題ありません。

また、brother.lengthとしている箇所がありますが、
配列は["要素", "要素", "要素", "要素"].lengthとすることで、
配列の要素数を取得出来ます。（上記の例だと要素が4つあるため、.length の値は4となります。
そこまでわかればあとは初めの例とほぼ同等の繰り返し処理になります。
詳しくは配布資料に載っているため、そちらを確認いただけると幸いです。



以上がJavaScriptゼミ第一回から第三回までのおさらいです。