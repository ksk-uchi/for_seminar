=====================
Answer
=====================

下記に解答を記します。
ただ、あくまで一例であり、
提示した内容の他にも解答はありますので、
参考程度に見ていただきたく思います。

2. プログラムを作るの解答
==============================

:2_1:

25 * 4 の結果を出力する

// answer
console.log(25 * 4);


:2_2:

自分の姓・名をそれぞれ変数に代入し、結合して出力する

// answer
// +演算子は左項および右項のどちらかに文字列があった場合、
// 文字列どうしの連結をした結果を返す
var first_name = "圭佑",
    last_name = "内村 ";
console.log(last_name + first_name);


:2_3:

+===========+============+============+============+
|   name    |   kokugo   |    math    |  english   |
+===========+============+============+============+
|   bob     |     20     |     78     |     98     |
+===========+============+============+============+

上記の構造をオブジェクトで表現する

// answer
// 複数の項目に対して値がそれぞれにある場合は
// オブジェクトで表現すると綺麗に表現出来ます。
var result = {
        name: "bob",
        kokugo: 20,
        math: 78,
        english: 98
    };


:2_4:

+===========+============+============+============+
|   name    |   kokugo   |    math    |  english   |
+===========+============+============+============+
|   bob     |     20     |     78     |     98     |
|-----------+------------+------------+------------|
|   kenji   |     65     |     32     |     43     |
|-----------+------------+------------+------------|
|   kumi    |     87     |     91     |     90     |
|-----------+------------+------------+------------|
|   eri     |     67     |     55     |     67     |
+===========+============+============+============+

上記の構造を配列とオブジェクトで表現する

// answer
// 各行の情報をそれぞれオブジェクトで表現し、
// それらを配列としてまとめたのが下記
var results = [{
        name: "bob",
        kokugo: 20,
        math: 78,
        english: 98
    }, {
        name: "kenji",
        kokugo: 65,
        math: 32,
        english: 43
    }, {
        name: "kumi",
        kokugo: 87,
        math: 91,
        english: 90
    }, {
        name: "eri",
        kokugo: 67,
        math: 55,
        english: 67
    }];


:2_5:

2_4の構造で、各生徒のそれぞれの平均点を出力する

// answer
// 各生徒の平均点をそれぞれの変数に格納し、出力する
var bob_ave = (results[0].kokugo + results[0].math + results[0].english) / 3,
    kenji_ave = (results[1].kokugo + results[1].math + results[1].english) / 3,
    kumi_ave = (results[2].kokugo + results[2].math + results[2].english) / 3,
    eri_ave = (results[3].kokugo + results[3].math + results[3].english) / 3;

console.log("bob: " + bob_ave);
console.log("kenji: " + kenji_ave);
console.log("kumi: " + kumi_ave);
console.log("eri: " + eri_ave);


:2_6:

2_4の構造で、eriの点数が、
国語が奇数でかつ、算数が奇数でかつ、英語が奇数である事を出力する

// answer
// results[1]には eriの情報が入っている
// 各変数には、点数が奇数であれば true が入り、そうでなければfalseが入る
var kokugo_judge = ((results[3].kokugo % 2) === 1),
    math_judge = ((results[3].math % 2) === 1),
    english_judge = ((results[3].english % 2) === 1);

// &&(AND演算子)は、左項と右項の両方がtrueの時のみtrueを返す。
console.log(kokugo_judge && math_judge && english_judge);

// 上記の場合だと、kokugo_judge && math_judgeがまず trueと評価され、
// true && english_judge がtrueと評価されるため、結果としてtrueが出力される


:2_7:

2_4の構造で、kenjiの点数が、
国語が奇数かまたは、算数が奇数かまたは、英語が奇数である事を出力する

// answer
// results[1]は kenji
var kokugo_judge = ((results[1].kokugo % 2) === 1),
    math_judge = ((results[1].math % 2) === 1),
    english_judge = ((results[1].english % 2) === 1);

// 「または」なので「||(OR演算子)」で評価する
console.log(kokugo_judge || math_judge || english_judge);


:2_8:

高さを表す変数と底辺を表す変数を用意し、
三角形の面積を出力する。
その時、出力を行う文の一行上に「三角形の面積は（底辺 * 高さ）/ 2 で求める。」というコメントを入れる

// answer
var height = 20,
    width = 10;

// 三角形の面積は（底辺 * 高さ）/ 2 で求める。
var triangle_area = (height * width) / 2
console.log(triangle_area);


:2_9:

trueの否定を出力する

// answer
console.log(!true);


:2_10:

trueを出力する式を3つ、
falseを出力する式を3つ作る

// answer
// true が出るやつ
console.log("1: ", !false);
console.log("2: ", 50 <= 50);
console.log("3: ", false || (10 <= 50) || false);

// false が出るやつ
console.log("4: ", !!false);
console.log("5: ", 50 < 50);
console.log("6: ", true && (50 < 50) && true);



3. 正誤問題
===============

:3_1:

var a = 10;         var a = 10,
var b = 20;    と       b = 20;    は同じ意味である？

// answer
正

複数の変数を宣言する場合は、var と一度書いて、
後は宣言したい変数をカンマ区切りで宣言できます。


:3_2:

文字列 + 数値 の結果は文字列になる？

// answer
正

+演算子は左項か右項に文字列があった場合、
文字列どうしの連結を行うため、上記の結果は文字列になります。


:3_3:

文字列 - 文字列 の結果は文字列になる？

// answer
誤

-演算子は数値どうしの引き算でしか使用できないため、
左項や右項に数値以外のものがあるか、数値に置き換えられない場合、NaNと評価されます。


:3_4:

7 == '7' の結果はtrueになる？

// answer
正

== で比較した場合は、
左項と右項が同じと評価出来る場合にはtrueを返します


:3_5:

true == 1 の結果はfalseになる？

// answer
誤

trueは1と評価されることもあります。
多くのプログラム言語でそうですが、
たとえばJavaScriptでも、true + 3 や 5 - true などの結果は、
trueが1として評価されます。
ちなみに、falseは0として評価されます。


:3_6:

true && false の結果はtrueになる？

// answer
誤

&&演算子は左項、右項が両方共trueの場合のみ
trueと評価されます


:3_7:

false && true の結果はfalseになる？

// answer
誤

解説は3_6と同じです。


:3_8:

false || true の結果はtrueになる？

// answer
正

||演算子は左項、右項のどちらかにtrueがあれば、
trueと評価されます。


:3_9:

true || false && true の結果はfalseになる？

// answer
誤

この場合は左から順に評価されるので、
最初に true || false の部分がtrueと評価され、
次にtrue && true の部分でtrueと評価されます。

ちなみに左から順に評価されない例として、
1 + 10 / 5 などは、算数でお馴染みですが、
/ のほうが先に評価されるため、
10 / 5 が2と評価され、
1 + 2 で3という流れになります。


:3_10:

! false && false と !(false && false)の結果は同じになる？

// answer
誤

! false && false は ! false がまず falseの否定なのでtrueと評価され、
true && falseで falseと評価されます。
一方、!(false && false)は、
()内のfalse && falseが先に評価されるので、
!false となり、falseの否定なので最終的にtrueと評価されます。
